# -*- coding: utf-8 -*-
"""Housing Data

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Wrb1fdLPqcenjxHbh3R9V08J1fhiCISe
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

dataset=pd.read_csv("/content/HousingData.csv")

from sklearn.neighbors import NearestNeighbors
from sklearn.model_selection import train_test_split

dataset.describe()

"""CRIM: Per capita crime rate by town

ZN: Proportion of residential land zoned for lots over 25,000 sq. ft

INDUS: Proportion of non-retail business acres per town

CHAS: Charles River dummy variable (= 1 if tract bounds river; 0 otherwise)

NOX: Nitric oxide concentration (parts per 10 million)

RM: Average number of rooms per dwelling

AGE: Proportion of owner-occupied units built prior to 1940

DIS: Weighted distances to five Boston employment centers

RAD: Index of accessibility to radial highways
TAX: Full-value property tax rate per $10,000

PTRATIO: Pupil-teacher ratio by town

B: 1000(Bk — 0.63)², where Bk is the proportion of [people of African American descent] by town

LSTAT: Percentage of lower status of the population

MEDV: Median value of owner-occupied homes in $1000s

"""

dataset['CRIM']=dataset['CRIM'].replace(np.NaN,dataset['CRIM'].mean())
dataset['ZN']=dataset['ZN'].replace(np.NaN,dataset['ZN'].mean())
dataset['INDUS']=dataset['INDUS'].replace(np.NaN,dataset['INDUS'].mean())
dataset['CHAS']=dataset['CHAS'].replace(np.NaN,dataset['CHAS'].mean())
dataset['AGE']=dataset['AGE'].replace(np.NaN,dataset['AGE'].mean())
dataset['LSTAT']=dataset['LSTAT'].replace(np.NaN,dataset['LSTAT'].mean())

y=dataset['MEDV'].copy()
y
x=pd.DataFrame(dataset,columns=dataset.columns)
x.drop(['MEDV'],axis=1,inplace=True)
x

dataset.isnull().sum()

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)
reg1=LinearRegression()

reg1.fit(x_train,y_train)
y_pred=reg1.predict(x_test)

MAE=mean_absolute_error(y_test,y_pred)
MAE

plt.scatter(y_pred,y_test,color='purple')
plt.plot([y_test.min(),y_test.max()],[y_test.min(),y_test.max()],'r--',lw=2)
plt.xlabel('Out')
plt.ylabel('In')
plt.show()

correlation_matrix=x.corr().round(2)
#annot=True to print the values insude the square
sns.heatmap(data=correlation_matrix,annot=True)

features=np.array([[0.00632,18,2.31,0,0.538,6.575,65.2,4.09,1,296,15.3,396.9,4.98]])
#using inpur to predict the output
predection=reg1.predict(features)
print("Predection: ()".format(predection))

